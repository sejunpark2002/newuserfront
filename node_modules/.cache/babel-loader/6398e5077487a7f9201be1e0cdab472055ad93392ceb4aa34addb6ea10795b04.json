{"ast":null,"code":"import{configureStore,ThunkAction,Action}from'@reduxjs/toolkit';import{useSelector,useDispatch}from'react-redux';import{all}from'redux-saga/effects';import createSagaMiddleware from'redux-saga';// import { todoSagaWatcher } from 'redux/todo/todoSaga';\nimport userReducer from'../redux/userReducer';// const sagaMiddleware = createSagaMiddleware();\n// function* rootSaga() {\n//   yield all([\n//     todoSagaWatcher(),\n//     // Other sagas...\n//   ]);\n// }\nexport const createStore=()=>configureStore({reducer:{userReducer// Other reducers...\n}// middleware: (getDefaultMiddleware) => getDefaultMiddleware({ serializableCheck: false }).concat(sagaMiddleware),\n});export const store=createStore();// sagaMiddleware.run(rootSaga);\n// export type AppDispatch = typeof store.dispatch;\n// export type RootState = ReturnType<typeof store.getState>;\n// export type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\n// Using useAppSelector instead of useSelector\n// 1. Don't need to access 'react-redux' module every time in every component\n// 2. In typescript, don't need to specify state type (RootState) every time\n// export function useAppSelector(fn: (state: RootState) => T): T {\n//   return useSelector<RootState, T>(fn);\n// }\nexport function useAppSelector(fn){return useSelector(fn);}// Using useAppDispatch instead of useDispatch\n// 1. Don't need to access 'react-redux' module every time in every component\n// 2. In typescript, don't need to specify dispatch type (AppDispatch (connect with store)) every time\nexport const useAppDispatch=()=>useDispatch();","map":{"version":3,"names":["configureStore","ThunkAction","Action","useSelector","useDispatch","all","createSagaMiddleware","userReducer","createStore","reducer","store","useAppSelector","fn","useAppDispatch"],"sources":["/Users/sejunpark/Lesson/newusermanagement/src/store/index.js"],"sourcesContent":["import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { all } from 'redux-saga/effects';\nimport createSagaMiddleware from 'redux-saga';\n// import { todoSagaWatcher } from 'redux/todo/todoSaga';\nimport userReducer from '../redux/userReducer'\n\n\n\n// const sagaMiddleware = createSagaMiddleware();\n\n// function* rootSaga() {\n//   yield all([\n//     todoSagaWatcher(),\n//     // Other sagas...\n//   ]);\n// }\n\nexport const createStore = () =>\n  configureStore({\n    reducer: {\n      \n      userReducer,\n      // Other reducers...\n    },\n    // middleware: (getDefaultMiddleware) => getDefaultMiddleware({ serializableCheck: false }).concat(sagaMiddleware),\n  });\n\nexport const store = createStore();\n\n// sagaMiddleware.run(rootSaga);\n\n// export type AppDispatch = typeof store.dispatch;\n// export type RootState = ReturnType<typeof store.getState>;\n// export type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\n\n// Using useAppSelector instead of useSelector\n// 1. Don't need to access 'react-redux' module every time in every component\n// 2. In typescript, don't need to specify state type (RootState) every time\n// export function useAppSelector(fn: (state: RootState) => T): T {\n//   return useSelector<RootState, T>(fn);\n// }\n\nexport function useAppSelector(fn) {\n  return useSelector(fn);\n}\n\n// Using useAppDispatch instead of useDispatch\n// 1. Don't need to access 'react-redux' module every time in every component\n// 2. In typescript, don't need to specify dispatch type (AppDispatch (connect with store)) every time\nexport const useAppDispatch = () => useDispatch();\n"],"mappings":"AAAA,OAASA,cAAc,CAAEC,WAAW,CAAEC,MAAM,KAAQ,kBAAkB,CACtE,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CACtD,OAASC,GAAG,KAAQ,oBAAoB,CACxC,MAAO,CAAAC,oBAAoB,KAAM,YAAY,CAC7C;AACA,MAAO,CAAAC,WAAW,KAAM,sBAAsB,CAI9C;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAO,MAAM,CAAAC,WAAW,CAAGA,CAAA,GACzBR,cAAc,CAAC,CACbS,OAAO,CAAE,CAEPF,WACA;AACF,CACA;AACF,CAAC,CAAC,CAEJ,MAAO,MAAM,CAAAG,KAAK,CAAGF,WAAW,CAAC,CAAC,CAElC;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAO,SAAS,CAAAG,cAAcA,CAACC,EAAE,CAAE,CACjC,MAAO,CAAAT,WAAW,CAACS,EAAE,CAAC,CACxB,CAEA;AACA;AACA;AACA,MAAO,MAAM,CAAAC,cAAc,CAAGA,CAAA,GAAMT,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}