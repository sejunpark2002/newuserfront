{"ast":null,"code":"import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js';\nexport { urlAlphabet } from './url-alphabet/index.js';\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes));\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;\n  let step = -~(1.6 * mask * defaultSize / alphabet.length);\n  return function () {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSize;\n    let id = '';\n    while (true) {\n      let bytes = getRandom(step);\n      let j = step;\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || '';\n        if (id.length === size) return id;\n      }\n    }\n  };\n};\nexport let customAlphabet = function (alphabet) {\n  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 21;\n  return customRandom(alphabet, size, random);\n};\nexport let nanoid = function () {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;\n  let id = '';\n  let bytes = crypto.getRandomValues(new Uint8Array(size));\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63];\n  }\n  return id;\n};","map":{"version":3,"names":["urlAlphabet","scopedUrlAlphabet","random","bytes","crypto","getRandomValues","Uint8Array","customRandom","alphabet","defaultSize","getRandom","mask","Math","log","length","LN2","step","size","arguments","undefined","id","j","customAlphabet","nanoid"],"sources":["/Users/sejunpark/Lesson/newusermanagement/node_modules/nanoid/index.browser.js"],"sourcesContent":["import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n"],"mappings":"AAAA,SAASA,WAAW,IAAIC,iBAAiB,QAAQ,yBAAyB;AAC1E,SAASD,WAAW,QAAQ,yBAAyB;AACrD,OAAO,IAAIE,MAAM,GAAGC,KAAK,IAAIC,MAAM,CAACC,eAAe,CAAC,IAAIC,UAAU,CAACH,KAAK,CAAC,CAAC;AAC1E,OAAO,IAAII,YAAY,GAAGA,CAACC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,KAAK;EAC9D,IAAIC,IAAI,GAAG,CAAC,CAAC,IAAKC,IAAI,CAACC,GAAG,CAACL,QAAQ,CAACM,MAAM,GAAG,CAAC,CAAC,GAAGF,IAAI,CAACG,GAAI,IAAI,CAAC;EAChE,IAAIC,IAAI,GAAG,CAAC,EAAG,GAAG,GAAGL,IAAI,GAAGF,WAAW,GAAID,QAAQ,CAACM,MAAM,CAAC;EAC3D,OAAO,YAAwB;IAAA,IAAvBG,IAAI,GAAAC,SAAA,CAAAJ,MAAA,QAAAI,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAGT,WAAW;IACxB,IAAIW,EAAE,GAAG,EAAE;IACX,OAAO,IAAI,EAAE;MACX,IAAIjB,KAAK,GAAGO,SAAS,CAACM,IAAI,CAAC;MAC3B,IAAIK,CAAC,GAAGL,IAAI;MACZ,OAAOK,CAAC,EAAE,EAAE;QACVD,EAAE,IAAIZ,QAAQ,CAACL,KAAK,CAACkB,CAAC,CAAC,GAAGV,IAAI,CAAC,IAAI,EAAE;QACrC,IAAIS,EAAE,CAACN,MAAM,KAAKG,IAAI,EAAE,OAAOG,EAAE;MACnC;IACF;EACF,CAAC;AACH,CAAC;AACD,OAAO,IAAIE,cAAc,GAAG,SAAAA,CAACd,QAAQ;EAAA,IAAES,IAAI,GAAAC,SAAA,CAAAJ,MAAA,QAAAI,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;EAAA,OAC9CX,YAAY,CAACC,QAAQ,EAAES,IAAI,EAAEf,MAAM,CAAC;AAAA;AACtC,OAAO,IAAIqB,MAAM,GAAG,SAAAA,CAAA,EAAe;EAAA,IAAdN,IAAI,GAAAC,SAAA,CAAAJ,MAAA,QAAAI,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;EAC5B,IAAIE,EAAE,GAAG,EAAE;EACX,IAAIjB,KAAK,GAAGC,MAAM,CAACC,eAAe,CAAC,IAAIC,UAAU,CAACW,IAAI,CAAC,CAAC;EACxD,OAAOA,IAAI,EAAE,EAAE;IACbG,EAAE,IAAInB,iBAAiB,CAACE,KAAK,CAACc,IAAI,CAAC,GAAG,EAAE,CAAC;EAC3C;EACA,OAAOG,EAAE;AACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}