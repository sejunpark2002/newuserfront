{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { all } from 'redux-saga/effects';\nimport createSagaMiddleware from 'redux-saga';\nimport { todoSagaWatcher } from 'redux/todo/todoSaga';\nimport userReducer from '../redux/userReducer';\nconst sagaMiddleware = createSagaMiddleware();\n\n// function* rootSaga() {\n//   yield all([\n//     todoSagaWatcher(),\n//     // Other sagas...\n//   ]);\n// }\n\nexport const createStore = () => configureStore({\n  reducer: {\n    userReducer\n    // Other reducers...\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: false\n  }).concat(sagaMiddleware)\n});\nexport const store = createStore();\nsagaMiddleware.run(rootSaga);\n\n// export type AppDispatch = typeof store.dispatch;\n// export type RootState = ReturnType<typeof store.getState>;\n// export type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\n\n// Using useAppSelector instead of useSelector\n// 1. Don't need to access 'react-redux' module every time in every component\n// 2. In typescript, don't need to specify state type (RootState) every time\n// export function useAppSelector(fn: (state: RootState) => T): T {\n//   return useSelector<RootState, T>(fn);\n// }\n\nexport function useAppSelector(fn) {\n  _s();\n  return useSelector(fn);\n}\n\n// Using useAppDispatch instead of useDispatch\n// 1. Don't need to access 'react-redux' module every time in every component\n// 2. In typescript, don't need to specify dispatch type (AppDispatch (connect with store)) every time\n_s(useAppSelector, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\nexport const useAppDispatch = () => {\n  _s2();\n  return useDispatch();\n};\n_s2(useAppDispatch, \"jI3HA1r1Cumjdbu14H7G+TUj798=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"names":["configureStore","ThunkAction","Action","useSelector","useDispatch","all","createSagaMiddleware","todoSagaWatcher","userReducer","sagaMiddleware","createStore","reducer","middleware","getDefaultMiddleware","serializableCheck","concat","store","run","rootSaga","useAppSelector","fn","_s","useAppDispatch","_s2"],"sources":["/Users/sejunpark/Lesson/newusermanagement/src/store/index.js"],"sourcesContent":["import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { all } from 'redux-saga/effects';\nimport createSagaMiddleware from 'redux-saga';\nimport { todoSagaWatcher } from 'redux/todo/todoSaga';\nimport userReducer from '../redux/userReducer'\nconst sagaMiddleware = createSagaMiddleware();\n\n// function* rootSaga() {\n//   yield all([\n//     todoSagaWatcher(),\n//     // Other sagas...\n//   ]);\n// }\n\nexport const createStore = () =>\n  configureStore({\n    reducer: {\n      \n      userReducer,\n      // Other reducers...\n    },\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware({ serializableCheck: false }).concat(sagaMiddleware),\n  });\n\nexport const store = createStore();\n\nsagaMiddleware.run(rootSaga);\n\n// export type AppDispatch = typeof store.dispatch;\n// export type RootState = ReturnType<typeof store.getState>;\n// export type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\n\n// Using useAppSelector instead of useSelector\n// 1. Don't need to access 'react-redux' module every time in every component\n// 2. In typescript, don't need to specify state type (RootState) every time\n// export function useAppSelector(fn: (state: RootState) => T): T {\n//   return useSelector<RootState, T>(fn);\n// }\n\nexport function useAppSelector(fn) {\n  return useSelector(fn);\n}\n\n// Using useAppDispatch instead of useDispatch\n// 1. Don't need to access 'react-redux' module every time in every component\n// 2. In typescript, don't need to specify dispatch type (AppDispatch (connect with store)) every time\nexport const useAppDispatch = () => useDispatch();\n"],"mappings":";;AAAA,SAASA,cAAc,EAAEC,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AACtE,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,GAAG,QAAQ,oBAAoB;AACxC,OAAOC,oBAAoB,MAAM,YAAY;AAC7C,SAASC,eAAe,QAAQ,qBAAqB;AACrD,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,MAAMC,cAAc,GAAGH,oBAAoB,CAAC,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMI,WAAW,GAAGA,CAAA,KACzBV,cAAc,CAAC;EACbW,OAAO,EAAE;IAEPH;IACA;EACF,CAAC;EACDI,UAAU,EAAGC,oBAAoB,IAAKA,oBAAoB,CAAC;IAAEC,iBAAiB,EAAE;EAAM,CAAC,CAAC,CAACC,MAAM,CAACN,cAAc;AAChH,CAAC,CAAC;AAEJ,OAAO,MAAMO,KAAK,GAAGN,WAAW,CAAC,CAAC;AAElCD,cAAc,CAACQ,GAAG,CAACC,QAAQ,CAAC;;AAE5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,cAAcA,CAACC,EAAE,EAAE;EAAAC,EAAA;EACjC,OAAOlB,WAAW,CAACiB,EAAE,CAAC;AACxB;;AAEA;AACA;AACA;AAAAC,EAAA,CANgBF,cAAc;EAAA,QACrBhB,WAAW;AAAA;AAMpB,OAAO,MAAMmB,cAAc,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMnB,WAAW,CAAC,CAAC;AAAA;AAACmB,GAAA,CAArCD,cAAc;EAAA,QAASlB,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}